t(regime[Sim.vec,,t-T]))
}
# European mortality trend + country-specific trend
m.xti[,t,] <- m.xti[,t-1,]* exp(matrix(fit$A1.x[xv - 20 + 1], ncol = 1)[,rep(1,length(Sim.vec))] +
fit$B.x[xv - 20 + 1] %o% proj$K.t_M[t-1,Sim.vec] +
fit$C.x[xv - 20 + 1] %o% proj$L.t_M[t-1,Sim.vec] +
fit$b.x[xv - 20 + 1] %o% proj$k.t_M[t-1,Sim.vec] +
fit$c.x[xv - 20 + 1] %o% proj$l.t_M[t-1,Sim.vec] +
t(regime[Sim.vec,,t-T]))
}
q.xti <- 1-exp(-m.xti)		# projected mortality rates
q.xti
}
##### 2) Calculate fitted mortality rates -----
mtx.obs.c            <- data_M_original$UNI$NED$dtx/data_M_original$UNI$NED$etx
mtx.fit.direct.c     <- matrix(NA, nrow = length(yv), ncol = length(xv))
mtx.fit.direct.c[1,] <- data_M$UNI$NED$dtx[1,]/data_M$UNI$NED$etx[1,]
for (i in 2:nrow(mtx.fit.direct.c)){
mtx.fit.direct.c[i,] <- mtx.obs.c[i-1,] * exp(LL_M$NR$A1.x + LL_M$NR$B.x*LL_M$NR$K.t[i-1] + LL_M$NR$C.x*LL_M$NR$L.t[i-1] +
LL_M$NR$a.x + LL_M$NR$b.x*LL_M$NR$k.t[i-1] + LL_M$NR$c.x*LL_M$NR$l.t[i-1])
}
nrow(mtx.fit.direct.c)
length(1875:2021)
##### Load packages
rm(list = ls())
library(MTS)
library(dplyr)
library(tidyquant)
library(fANCOVA)
library(parallel)
library(doParallel)
library(foreach)
library(tibble)
library(ggplot2)
##### Load colour definitions
col.dot       <- '#56B4E9'
col.line      <- '#A3D596'
col.shade     <- '#ddf0fb'
##### 0) Specify and load previously defined/calibrated object
xv           <- 20:85
yv = yvSPEC  <- 1875:2021
CountrySPEC  <- "NED"
nSim         <- 10000
n.ahead      <- 150
yvv          <- (yv[length(yv)]+1):(yv[length(yv)] + n.ahead)
path         <- "C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Papers/Paper 3 - regime switching model"
LL_M            <- readRDS(file = 'C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Jumps in mortality modelling/R-code/Save/LL_M_baseline1875.rds')
proj            <- readRDS(file = 'C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Jumps in mortality modelling/R-code/Save/Simulated_period_effects1875.rds')
states.regime20 <- readRDS(file = 'C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Jumps in mortality modelling/R-code/Save/Sim_regime_process_noww1875_20.rds')
states.regime60 <- readRDS(file = 'C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Jumps in mortality modelling/R-code/Save/Sim_regime_process_noww1875_60.rds')
load(file = "C:/Users/u0131219/Documents/Reserving phd/Jumps in mortality modelling/Data/data_M_final1875.RData")
load(file = "C:/Users/u0131219/Documents/Reserving phd/Jumps in mortality modelling/Data/data_F_final1875.RData")
data_M_original <- data_M
data_F_original <- data_F
##### 1) Function to calculate the future trajectories of the mortality rates -----
ProjectMortalityMultiPopulationMultiSex=function(xv, yv, fitList, projList, nAhead, Sim.vec, CountrySPEC, regime){
T 	 <- length(yv)		  # number of years in calibration period
nA	 <- length(xv)		  # number of ages
q.xt <-  fitList  			# initialize list of same length fitList
fit     <- fitList$NR
proj    <- projList
# country specific mortality
m.xti        <- array(NA, dim = c(nA,(T+nAhead),length(Sim.vec)))	# initialize
m.xti[,1:T,] <- t(mtx.fit.direct.c[,as.character(xv)])	# fitted mortality
m.xt.obs     <- t(data_M_original$UNI[[CountrySPEC]]$dtx/data_M_original$UNI[[CountrySPEC]]$etx)
for(t in (T+1):(T+nAhead)){ 	# projected death rates: use most recent death rate as starting point
if (t == T + 1){
# European mortality trend + country-specific trend
m.xti[,t,] <- matrix(m.xt.obs[as.character(xv),t-1], ncol = 1)[,rep(1,length(Sim.vec))]*
exp(matrix(fit$A1.x[xv - 20 + 1], ncol = 1)[,rep(1,length(Sim.vec))] +
fit$B.x[xv - 20 + 1] %o% proj$K.t_M[t-1,Sim.vec] + fit$C.x[xv - 20 + 1] %o% proj$L.t_M[t-1,Sim.vec] +
fit$b.x[xv - 20 + 1] %o% proj$k.t_M[t-1,Sim.vec] + fit$c.x[xv - 20 + 1] %o% proj$l.t_M[t-1,Sim.vec] +
t(regime[Sim.vec,,t-T]))
}
# European mortality trend + country-specific trend
m.xti[,t,] <- m.xti[,t-1,]* exp(matrix(fit$A1.x[xv - 20 + 1], ncol = 1)[,rep(1,length(Sim.vec))] +
fit$B.x[xv - 20 + 1] %o% proj$K.t_M[t-1,Sim.vec] +
fit$C.x[xv - 20 + 1] %o% proj$L.t_M[t-1,Sim.vec] +
fit$b.x[xv - 20 + 1] %o% proj$k.t_M[t-1,Sim.vec] +
fit$c.x[xv - 20 + 1] %o% proj$l.t_M[t-1,Sim.vec] +
t(regime[Sim.vec,,t-T]))
}
q.xti <- 1-exp(-m.xti)		# projected mortality rates
q.xti
}
##### 2) Calculate fitted mortality rates -----
mtx.obs.c            <- data_M_original$UNI$NED$dtx/data_M_original$UNI$NED$etx
mtx.fit.direct.c     <- matrix(NA, nrow = length(yv), ncol = length(xv))
mtx.fit.direct.c[1,] <- data_M$UNI$NED$dtx[1,]/data_M$UNI$NED$etx[1,]
for (i in 2:nrow(mtx.fit.direct.c)){
mtx.fit.direct.c[i,] <- mtx.obs.c[i-1,] * exp(LL_M$NR$A1.x + LL_M$NR$B.x*LL_M$NR$K.t[i-1] + LL_M$NR$C.x*LL_M$NR$L.t[i-1] +
LL_M$NR$a.x + LL_M$NR$b.x*LL_M$NR$k.t[i-1] + LL_M$NR$c.x*LL_M$NR$l.t[i-1])
}
dimnames(mtx.fit.direct.c) <- list(yv, xv)
##### 3) Example of simulated paths -----
sim.vec <- c(5,17,46)
Ages    <- c(35,80)
simq20_ex <- ProjectMortalityMultiPopulationMultiSex(20:59, yv, LL_M, proj, n.ahead, Sim.vec = sim.vec, CountrySPEC, states.regime20$regime)
simq60_ex <- ProjectMortalityMultiPopulationMultiSex(60:85, yv, LL_M, proj, n.ahead, Sim.vec = sim.vec, CountrySPEC, states.regime60$regime)
dimnames(simq20_ex) <- list(20:59, yv[1]:(tail(yv,1) + n.ahead), 1:length(sim.vec))
dimnames(simq60_ex) <- list(60:85, yv[1]:(tail(yv,1) + n.ahead), 1:length(sim.vec))
simq20_ex[as.character(Ages[1]),as.character(yv),1:3] <- cbind(mtx.obs.c[,as.character(Ages[1])], mtx.obs.c[,as.character(Ages[1])], mtx.obs.c[,as.character(Ages[1])])
simq60_ex[as.character(Ages[2]),as.character(yv),1:3] <- cbind(mtx.obs.c[,as.character(Ages[2])], mtx.obs.c[,as.character(Ages[2])], mtx.obs.c[,as.character(Ages[2])])
df40 <- data.frame('Year' = yv[1]:(tail(yv,1) + n.ahead), 'Age' = Ages[1],
'qxt' = as.numeric(simq20_ex[as.character(Ages[1]),,]),
'Sim' = as.character(c(rep(1:length(sim.vec), each = dim(simq20_ex)[2])))) %>%
mutate('Type' = plyr::mapvalues(as.character(Year < 2022), from = c('TRUE', 'FALSE'), to = c('Observed','Forecast'))) %>%
dplyr::filter(Sim %in% as.character(c(1:length(sim.vec))))
df80 <- data.frame('Year' = yv[1]:(tail(yv,1) + n.ahead), 'Age' = Ages[2],
'qxt' = as.numeric(simq60_ex[as.character(Ages[2]),,]),
'Sim' = as.character(c(rep(1:length(sim.vec), each = dim(simq60_ex)[2])))) %>%
mutate('Type' = plyr::mapvalues(as.character(Year < 2022), from = c('TRUE', 'FALSE'), to = c('Observed','Forecast'))) %>%
dplyr::filter(Sim %in% as.character(1:length(sim.vec)))
df <- rbind(df40, df80) %>% dplyr::filter(Year >= 1948 & Year <= 2080)
df$Age <- factor(as.character(df$Age), levels = Ages, labels = paste('Age',Ages))
Traj_age_80 <- ggplot(df, aes(x = Year, y = qxt)) +
theme_bw(base_size = 15) + xlab('Year') + ylab(bquote(q['x,t'])) +
facet_wrap(~Age, scales = 'free') +
geom_point(data = df %>% dplyr::filter(Type == 'Observed'), col = col.dot) +
geom_line(data = df %>% dplyr::filter(Type == 'Forecast' | Year == 2021), aes(group = Sim, col = Sim), alpha = 0.7,linewidth = 1)  +
scale_color_manual(name = '', values = c('1' = '#A3D596', '2' = '#ff993d', '3' = '#F8766D'),
labels = c('1' = 'Path 1', '2' = 'Path 2', '3' = 'Path 3')) +
geom_vline(xintercept = 2021, linetype = 'dashed', col = 'gray70') +
theme(strip.background = element_blank(),
legend.position = 'bottom') +
guides(col = guide_legend(override.aes = list(alpha = 1)))
Traj_age_80
# ggsave(filename = paste0(path, '/Figures/TrajMortRate.pdf'),
#        plot = Traj_age_80,
#        width = 20,
#        height = 10,
#        units = "cm")
##### 4) Calculate future mortality rates with shocks ----
simq20 <- ProjectMortalityMultiPopulationMultiSex(20:59, yv, LL_M, proj, n.ahead, Sim.vec = 1:nSim, CountrySPEC, states.regime20$regime)
simq60 <- ProjectMortalityMultiPopulationMultiSex(60:85, yv, LL_M, proj, n.ahead, Sim.vec = 1:nSim, CountrySPEC, states.regime60$regime)
dimnames(simq20) <- list(20:59, yv[1]:(tail(yv,1) + n.ahead), 1:nSim)
dimnames(simq60) <- list(60:85, yv[1]:(tail(yv,1) + n.ahead), 1:nSim)
# saveRDS(simq20, file = 'C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Jumps in mortality modelling/R-code/Save/simq_noww1875_20_rs.rds')
# saveRDS(simq60, file = 'C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Jumps in mortality modelling/R-code/Save/simq_noww1875_60_rs.rds')
##### 5) Calculate future mortality rates without shocks -----
# simq20_baseline <- ProjectMortalityMultiPopulationMultiSex(20:59, yv, LL_M, proj, n.ahead, Sim.vec = 1:nSim, CountrySPEC, states.regime20$regime*0)
# simq60_baseline <- ProjectMortalityMultiPopulationMultiSex(60:85, yv, LL_M, proj, n.ahead, Sim.vec = 1:nSim, CountrySPEC, states.regime60$regime*0)
#
# dimnames(simq20_baseline) <- list(20:59, yv[1]:(tail(yv,1) + n.ahead), 1:nSim)
# dimnames(simq60_baseline) <- list(60:85, yv[1]:(tail(yv,1) + n.ahead), 1:nSim)
# From AG2022 model
simq_old <- readRDS(file = "C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Jumps in mortality modelling/Data/projNED.rds")
dimnames(simq_old$Male) <- list(0:90, 1970:2080, 1:nSim)
## Plots
construct_plotdf_mortality_rates <- function(xv, yv, Data, Age, qProj, qProjIABE, Sex, CountrySPEC) {
# Specifications
nSim 		    <- dim(qProj)[3]			# number of simulations
nAhead.new  <- dim(qProj)[2] - length(yv)	# number of projected years
yv.IABE     <- 1970:2019
nAhead.IABE <- dim(qProjIABE$Male)[2] - length(yv.IABE)
# Age s
q.mat.new	 <- qProj[as.character(Age),,]
q.mat.IABE <- qProjIABE$Male[as.character(Age),,]
# observed mortality rates q(t,x)
m.obs	<- (Data$UNI[[CountrySPEC]]$dtx/Data$UNI[[CountrySPEC]]$etx)[,as.character(Age)]	# observed death rates m(t,x)
q.obs	<- 1-exp(-m.obs)
# Define range y-axis
bounds <- c(min(c(q.mat.IABE, q.mat.new, q.obs)), max(c(q.mat.IABE, q.mat.new, q.obs)))
# Percentiles
vP <- c(0.005, 0.025, 0.05, 0.5, 0.95, 0.975, 0.995)
# Compute quantiles
mQuantiles.new  <- array(NA, dim = c(7, nAhead.new + 1))
mQuantiles.IABE <- array(NA, dim = c(7, nAhead.IABE + 1))
dimnames(mQuantiles.IABE) <- list(paste0('Q',1:7), as.character(tail(yv.IABE,1):(tail(yv.IABE,1) + nAhead.IABE)))
dimnames(mQuantiles.new)  <- list(paste0('Q',1:7), as.character(tail(yv,1):(tail(yv,1) + nAhead.new)))
# Compute quantiles IABE version 2020-2021
mQuantiles.IABE[,"2020"] <- quantile(q.mat.IABE["2020",], probs = vP, na.rm = TRUE)
mQuantiles.IABE[,"2021"] <- quantile(q.mat.IABE["2021",], probs = vP, na.rm = TRUE)
for(y in 2022:2080){
mQuantiles.new[,as.character(y)]  <- quantile(q.mat.new[as.character(y),],  probs = vP, na.rm = TRUE)
mQuantiles.IABE[,as.character(y)] <- quantile(q.mat.IABE[as.character(y),], probs = vP, na.rm = TRUE)
}
# Last observation
mQuantiles.new[,"2021"]  <- q.mat.new["2021",1]
mQuantiles.IABE[,"2019"] <- q.mat.IABE["2019",1]
# Right format to plot
df_quant.new  <- as.data.frame(t(mQuantiles.new)) %>% rownames_to_column('Year') %>% tidyr::gather(key = "Quantile", value = "Value", - Year) %>%
mutate('Year' = as.numeric(Year), 'Type' = 'New')
df_quant.IABE <- as.data.frame(t(mQuantiles.IABE)) %>% rownames_to_column('Year') %>% tidyr::gather(key = "Quantile", value = "Value", - Year) %>%
mutate('Year' = as.numeric(Year), 'Type' = 'IABE2020')
df_quant      <- rbind(df_quant.new, df_quant.IABE)
# Observed and fitted data
df_fit.new  <- data.frame('Year' = yv, "Quantile" = 'Fitted', "Value" = q.mat.new[1:length(yv),1], 'Type' = 'New')
df_fit.IABE <- data.frame('Year' = yv.IABE, "Quantile" = 'Fitted', "Value" = q.mat.IABE[1:length(yv.IABE),1], 'Type' = 'IABE2020')
df_fit      <- rbind(df_fit.new, df_fit.IABE)
df_obs <- data.frame('Year' = yv, "Quantile" = 'Obs', "Value" = q.obs, "Type" = NA)
# Merge
df <- rbind(rbind(df_quant, df_obs), df_fit)
df$Type <- factor(df$Type, levels = c("New", "IABE2020"))
df
}
df_35 <- construct_plotdf_mortality_rates(xv, yv, data_M_original, 35, simq20, simq_old, "Male", "NED") %>% mutate(Age = 'Age 35')
df_50 <- construct_plotdf_mortality_rates(xv, yv, data_M_original, 50, simq20, simq_old, "Male", "NED") %>% mutate(Age = 'Age 50')
df_65 <- construct_plotdf_mortality_rates(xv, yv, data_M_original, 65, simq60, simq_old, "Male", "NED") %>% mutate(Age = 'Age 65')
df_80 <- construct_plotdf_mortality_rates(xv, yv, data_M_original, 85, simq60, simq_old, "Male", "NED") %>% mutate(Age = 'Age 80')
df <- df_35 %>% bind_rows(df_50) %>% bind_rows(df_65) %>% bind_rows(df_80)
#df[which(df$Year %in% 2078:2080 & df$Type == 'IABE2020'),"Value"] <- NA
df <- df %>% dplyr::filter(Year >= 1950 & Year <= 2080)
#df[which(as.character(df$Type) == 'IABE2020' & df$Year >= 2078),] <- NA
df[which(df$Quantile %in% c("Q1","Q7") & df$Year > 2076),] <- NA
df[which(df$Quantile %in% c("Q2","Q6") & df$Year > 2078),] <- NA
df[which(df$Quantile %in% c("Q3","Q5") & df$Year > 2080),] <- NA
df[which(df$Quantile %in% c("Q1","Q2","Q6","Q7") & as.character(df$Type) == 'IABE2020'),] <- NA
df <- df %>% tidyr::drop_na(Year)
a1 <- ggplot(df) + theme_bw(base_size = 15) + ylab(bquote(q['x,t'])) +
facet_wrap(~Age, nrow = 2, ncol = 2, scales = 'free_y') +
theme(strip.background = element_blank()) +
geom_ribbon(data = df %>% filter(Quantile %in% c('Q1')), aes(x = Year,
ymin = df %>% filter(Quantile == 'Q1') %>% pull(Value),
ymax = df %>% filter(Quantile == 'Q7') %>% pull(Value),
fill = Type, group = Type, alpha = 'CI99')) +
geom_ribbon(data = df %>% filter(Quantile %in% c('Q2')), aes(x = Year,
ymin = df %>% filter(Quantile == 'Q2') %>% pull(Value),
ymax = df %>% filter(Quantile == 'Q6') %>% pull(Value),
fill = Type, group = Type, alpha = 'CI95')) +
geom_ribbon(data = df %>% filter(Quantile %in% c('Q3')), aes(x = Year,
ymin = df %>% filter(Quantile == 'Q3') %>% pull(Value),
ymax = df %>% filter(Quantile == 'Q5') %>% pull(Value),
fill = Type, group = Type, alpha = 'CI90')) +
geom_point(data = df %>% filter(Quantile == 'Obs'), aes(x = Year, y = Value, col = 'Obs'), size = 1) +
geom_line(data = df %>% filter(Quantile == 'Q4' & Type == 'New'), aes(x = Year, y = Value, group = Type), col = '#4590ba', size = 0.5) +
geom_line(data = df %>% filter(Quantile == 'Q4' & Type == 'IABE2020'), aes(x = Year, y = Value, group = Type), col = '#62805a', size = 0.5) +
geom_line(data = df %>% filter(Quantile == 'Fitted'), aes(x = Year, y = Value, group = Type, col = Type), linetype = 'solid', linewidth = 0.5) +
scale_fill_manual(name = '', values = c('New' = col.dot, 'IABE2020' = col.line),
labels = c('New' = '90% CI AG2020', 'IABE2020' = ''),
guide = guide_legend(override.aes = list(
fill = c('New' = 'white', 'IABE2020' = col.line)))) +
scale_color_manual(name = '', values = c('Obs' = col.shade, 'New' = col.dot, 'IABE2020' = col.line),
labels = c('Obs' = 'Observed', 'New' = 'Fit RS model', 'IABE2020' = 'Fit AG2020'),
guide = guide_legend(override.aes = list(
linetype = c('Obs' = 'solid', 'New' = 'solid', 'AG2020' = 'blank'),
shape = c('Obs' = NA, 'New' = NA, 'IABE2020' = 16)))) +
scale_alpha_manual(name = 'RS model',
values = c('CI99' = 0.2, 'CI95' = 0.5, 'CI90' = 1),
labels = c('CI99' = '99% CI', 'CI95' = '95% CI', 'CI90' = '90% CI'),
guide = guide_legend(override.aes = list(
fill = c('CI99' = col.dot, 'CI95' = col.dot, 'CI90' = col.dot)))) +
theme(legend.position = 'bottom',
legend.spacing.x = unit(0.1,'cm'))
a1
ggsave(filename = paste0(path, '/Figures/SimMortRates.noww.pdf'),
plot = a1,
width = 26,
height = 15.8,
units = "cm")
## Packages
packages <- c('psych','MASS', 'systemfit', 'dplyr', 'tibble', 'ggplot2','RColorBrewer',
'FSA','mnormt','readr','readxl','stats','systemfit','rlist', 'tidyr',
'ISOweek', 'scales', 'foreach', 'mvnfast', 'Rsolnp')
invisible(lapply(packages, library, character.only = TRUE))
##### 1) Load packages
packages <- c('psych','MASS', 'systemfit', 'dplyr', 'tibble', 'ggplot2','RColorBrewer',
'FSA','mnormt','readr','readxl','stats','systemfit','rlist', 'tidyr',
'ISOweek', 'scales', 'foreach', 'mvnfast', 'Rsolnp')
invisible(lapply(packages, library, character.only = TRUE))
## Packages
packages <- c('psych','MASS', 'systemfit', 'dplyr', 'tibble', 'ggplot2','RColorBrewer',
'FSA','mnormt','readr','readxl','stats','systemfit','rlist', 'tidyr',
'ISOweek', 'scales', 'foreach', 'mvnfast', 'Rsolnp')
invisible(lapply(packages, library, character.only = TRUE))
##### 1) Load and/or install packages ----
packages <- c('psych','MASS', 'systemfit', 'dplyr', 'tibble', 'ggplot2','RColorBrewer',
'FSA','mnormt','readr','readxl','stats','systemfit','rlist', 'tidyr',
'ISOweek', 'scales', 'foreach', 'mvnfast', 'Rsolnp')
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
# Package names
packages <- c('psych','MASS', 'systemfit', 'dplyr', 'tibble', 'ggplot2','RColorBrewer',
'FSA','mnormt','readr','readxl','stats','systemfit','rlist', 'tidyr',
'ISOweek', 'scales', 'foreach', 'mvnfast', 'Rsolnp')
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
### 1.3) Install packages ----
installed_packages <- packages %in% rownames(installed.packages())
##### 1) Preliminary set-up ----
### 1.1) Remove history ----
rm(list = ls())
### 1.2) Package names ----
packages <- c('doParallel','dplyr', 'foreach', 'ggplot2', 'ggpubr',
'parallel', 'rstudioapi', 'tibble', 'stats', 'tidyr', 'utils')
### 1.3) Install packages ----
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# install.packages("BiocManager")
# BiocManager::install("aroma.light")
# remotes::install_github("RobbenJ/MultiMoMo")
### 1.4) Load Packages ----
invisible(lapply(c(packages,'MultiMoMo'), library, character.only = TRUE))
### 1.5) Define colour scale ----
col.dot       <- '#56B4E9'
col.dot.shade <- '#cce9f8'
col.shade     <- '#ddf0fb'
col.line      <- '#A3D596'
col.outl      <- '#F8766D'
### 1.6) Set working directory ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### 1.7) Read in data set  ----
load(file = "Data/data_M_final1875.RData")
### 1.8) Load functions and previous results ----
simq20 <- readRDS(file = 'Save/simq_noww1875_20_rs.rds')
simq60 <- readRDS(file = 'Save/simq_noww1875_60_rs.rds')
q_BE_closed <- readRDS(file = 'Save/qxt_BE_closed1875.rds')
### 1.9) General specifications ----
xv      <- 20:85
yv      <- 1875:2021
TL      <- length(yv)
m       <- length(xv)
n.ahead <- 59
yv.proj <- (yv[length(yv)]+1):(yv[length(yv)] + n.ahead)
yvv     <- yv[1]:(tail(yv.proj,1))
Country <- c("AUS", "BEL", "DNK", "FIN", "FRA", "GER", "ICE", "IRE", "LUX",
"NED", "NOR", "SWE", "SWI", "UNK")
CountrySPEC  <- "NED"
simq   <- abind(simq20, simq60, along = 1)
??abind
### 1.2) Package names ----
packages <- c('abind', 'doParallel','dplyr', 'foreach', 'ggplot2', 'ggpubr',
'parallel', 'rstudioapi', 'tibble', 'stats', 'tidyr', 'utils')
### 1.3) Install packages ----
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
### 1.4) Load Packages ----
invisible(lapply(c(packages,'MultiMoMo'), library, character.only = TRUE))
simq   <- abind(simq20, simq60, along = 1)
simq_closed <- MultiMoMo::close_mortality_rates(yv, simq, 35, 11, parallel = TRUE)
saveRDS(simq_closed, file = 'Save/simq_noww1875_closed.rds')
##### 2) Close simulated mortality rates -----
# simq   <- abind(simq20, simq60, along = 1)
# simq_closed <- MultiMoMo::close_mortality_rates(yv, simq, 35, 11, parallel = TRUE)
# saveRDS(simq_closed, file = 'Save/simq_noww1875_closed.rds')
simq_closed <- readRDS(file = 'Save/simq_noww1875_closed.rds')
#### Specificiations
agem  <- 120
xmin  <- 20
sty   <- 2021
int   <- 0.02
v     <- 1/(1+int)
##### 1) Preliminary set-up ----
### 1.1) Remove history ----
rm(list = ls())
### 1.2) Package names ----
packages <- c('abind', 'doParallel','dplyr', 'foreach', 'ggplot2', 'ggpubr',
'parallel', 'remotes', 'rstudioapi', 'tibble', 'stats', 'tidyr',
'utils')
### 1.3) Install packages ----
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# install.packages("BiocManager")
# BiocManager::install("aroma.light")
# remotes::install_github("RobbenJ/MultiMoMo")
### 1.4) Load Packages ----
invisible(lapply(c(packages,'MultiMoMo'), library, character.only = TRUE))
### 1.5) Define colour scale ----
col.dot       <- '#56B4E9'
col.dot.shade <- '#cce9f8'
col.shade     <- '#ddf0fb'
col.line      <- '#A3D596'
col.outl      <- '#F8766D'
### 1.6) Set working directory ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
### 1.7) Read in data set  ----
load(file = "Data/data_M_final1875.RData")
### 1.8) Load functions and previous results ----
simq20 <- readRDS(file = 'Save/simq_noww1875_20_rs.rds')
simq60 <- readRDS(file = 'Save/simq_noww1875_60_rs.rds')
q_BE_closed <- readRDS(file = 'Save/qxt_BE_closed1875.rds')
### 1.9) General specifications ----
xv      <- 20:85
yv      <- 1875:2021
TL      <- length(yv)
m       <- length(xv)
n.ahead <- 59
yv.proj <- (yv[length(yv)]+1):(yv[length(yv)] + n.ahead)
yvv     <- yv[1]:(tail(yv.proj,1))
Country <- c("AUS", "BEL", "DNK", "FIN", "FRA", "GER", "ICE", "IRE", "LUX",
"NED", "NOR", "SWE", "SWI", "UNK")
CountrySPEC  <- "NED"
##### 2) Close simulated mortality rates -----
# simq   <- abind(simq20, simq60, along = 1)
# simq_closed <- MultiMoMo::close_mortality_rates(yv, simq, 35, 11, parallel = TRUE)
# saveRDS(simq_closed, file = 'Save/simq_noww1875_closed.rds')
simq_closed <- readRDS(file = 'Save/simq_noww1875_closed.rds')
##### 3) Calculation of SCRs -----
#### Specificiations
agem  <- 120
xmin  <- 20
sty   <- 2021
int   <- 0.02
v     <- 1/(1+int)
### 3.1) life annuity - 65 yo, annuity of 1000 annually
# Specifications of life annuity
age.la.vec <- 55:90
df.ILA <- data.frame('Age' = age.la.vec, 'SCR.std'= NA, "SCR.var"= NA, "BEL0" = NA)
for(age.la in age.la.vec){
TL       <- agem - age.la + 1
annuity  <- 10000
index.la <- cbind(as.character(age.la:agem), as.character(sty:(sty + agem - age.la)))
# BEL at time 0 using BE mortality rates for life annuity
qxt.BE.la  <- q_BE_closed[index.la]
pxt.BE.la  <- 1 - qxt.BE.la
Tpxt.BE.la <- cumprod(pxt.BE.la)
BEL.0.la   <- sum(annuity*v^(1:TL)*Tpxt.BE.la)
# BEL at time 0 using BE mortality rates | longevity shock of 20% (QIS5)
qxt.BE.long  <- qxt.BE.la*0.8
pxt.BE.long  <- 1 - qxt.BE.long
Tpxt.BE.long <- cumprod(pxt.BE.long)
BEL.0.long   <- sum(annuity*v^(1:TL)*Tpxt.BE.long)
SCR.long <- BEL.0.long - BEL.0.la
SCR.long
# BEL using simulated mortality rates - life annuity
BEL.0.s <- rep(NA, dim(simq_closed)[3])
for(s in 1:dim(simq_closed)[3]){
qxt.s        <- simq_closed[,,s]
qxt.s        <- qxt.s[index.la]
pxt.s        <- 1 - qxt.s
Tpxt.s       <- cumprod(pxt.s)
BEL.0.s[s]   <- sum(annuity*v^(1:TL-1)*Tpxt.s)
}
SCR.la <- quantile(BEL.0.s, 0.995) - BEL.0.la
df.ILA[which(age.la.vec %in% age.la),2:4] <- c(SCR.long, SCR.la, BEL.0.la)
}
ILA <- ggplot(df.ILA) +
xlab('Age') + ylab('SCR') + ggtitle('Immediate life annuity') +
theme_bw(base_size = 15) +
geom_line(aes(x = Age, y = SCR.var, col = 'v1'), linewidth = 1.5, show.legend = TRUE) +
geom_line(aes(x = Age, y = SCR.std, col = 'v2'), linewidth = 1.5, show.legend = TRUE) +
scale_color_manual(name = '',
labels = c('v1' = 'VaR approach', 'v2' = 'Standard model'),
values = c('v1' = col.dot, 'v2' = col.shade)) +
theme(legend.position = 'bottom')
ILA
### 3.2) Term insurance ----
# Specifications
death.ben <- 150000
age.ti.vec    <- 20:60
df.TLI <- data.frame('Age' = age.ti.vec, 'SCR.mort'= NA, 'SCR.cat'= NA, 'SCR.std'= NA, "SCR.var"= NA, "BEL0" = NA)
for (age.ti in age.ti.vec){
len       <- 65 - age.ti
index.ti  <-  cbind(as.character(age.ti:(age.ti + len)), as.character(sty:(sty + len)))
# BEL at time 0 using BE mortality rates for term insurance
qxt.BE.ti  <- q_BE_closed[index.ti]
pxt.BE.ti  <- 1 - qxt.BE.ti
Tpxt.BE.ti <- cumprod(pxt.BE.ti)
BEL.0.ti   <- sum(death.ben*v^(1:len)*c(1,Tpxt.BE.ti[1:(len-1)])*qxt.BE.ti[1:len])
# BEL at time 0 using BE mortality rates | mortality shock of 15% (QIS5)
qxt.BE.mort  <- q_BE_closed[index.ti]*1.15
pxt.BE.mort  <- 1 - qxt.BE.mort
Tpxt.BE.mort <- cumprod(pxt.BE.mort)
BEL.0.mort   <- sum(death.ben*v^(1:len)*c(1,Tpxt.BE.mort[1:(len-1)])*qxt.BE.mort[1:len])
SCR.mort     <- BEL.0.mort - BEL.0.ti
# BEL at time 0 using BE mortality rates | catastrophe stock - absolute 0.0015 increase
qxt.BE.cat  <- q_BE_closed[index.ti] + c(0.0015,rep(0,length(index.ti) - 1))
pxt.BE.cat  <- 1 - qxt.BE.cat
Tpxt.BE.cat <- cumprod(pxt.BE.cat)
BEL.0.cat   <- sum(death.ben*v^(1:len)*c(1,Tpxt.BE.cat[1:(len-1)])*qxt.BE.cat[1:len])
SCR.cat     <- BEL.0.cat - BEL.0.ti
# BEL using simulated mortality rates - term life insurance
BEL.0.s <- rep(NA, dim(simq_closed)[3])
for(s in 1:dim(simq_closed)[3]){
qxt.s         <- simq_closed[,,s]
qxt.s         <- qxt.s[index.ti]
pxt.s         <- 1 - qxt.s
Tpxt.s        <- cumprod(pxt.s)
BEL.0.s[s]    <- sum(death.ben*v^(1:len)*c(1,Tpxt.s[1:(len-1)])*qxt.s[1:len])
}
SCR.ti <- quantile(BEL.0.s, 0.995) - BEL.0.ti
Age  <- age.ti
mort <- round(SCR.mort,2)
cat  <- 0.0015*(150000 - BEL.0.ti)
scr  <- round(sqrt(mort^2 + cat^2),2)
df.TLI[which(Age == df.TLI$Age),] <- c(Age, mort, cat, scr, SCR.ti, BEL.0.ti)
}
### 3.3) Plot
TLI <- ggplot(df.TLI) +
xlab('Age') + ylab('SCR') + ggtitle('Term life insurance') +
theme_bw(base_size = 15) +
geom_line(aes(x = Age, y = SCR.var, col = 'v1'), linewidth = 1.5, show.legend = TRUE) +
geom_line(aes(x = Age, y = SCR.std, col = 'v2'), linewidth = 1.5, show.legend = TRUE) +
scale_color_manual(name = '',
labels = c('v1' = 'VaR approach', 'v2' = 'Standard model'),
values = c('v1' = col.dot, 'v2' = col.shade)) +
theme(legend.position = 'bottom')
# Save plot
p <- ggpubr::ggarrange(ILA, TLI, common.legend = TRUE, legend = 'bottom')
p
path         <- "C:/Users/u0131219/Dropbox/Mijn pc (GHUM-L-E033HR5M)/Documents/Reserving phd/Papers/Paper 3 - regime switching model"
ggsave(filename = paste0(path, '/Figures/SCR_illustration.pdf'),
plot = p,
width = 20,
height = 10,
units = "cm")
